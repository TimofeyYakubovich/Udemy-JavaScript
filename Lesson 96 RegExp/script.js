'use strict'

// регулярные выражения позволяют удобно работать со строками 
// удалять, заменять части слов, искать кусочки строк, ограничевать ввод определённых знаков и тд.

// любое регулярное выражение состоит из двух частей 1 pattern 2 flags

// 1 pattern - эо шаблон, то что мы ищем в этой строке или удалить и тд.

// что бы создать регулярное выражение используется несколько синтаксисов

// new RegExp('pattern', 'flags'); // классический синтакси создания регулярных выражений при помощи конструктора new которым никто не пользуется
// /pattern/f  // более простой синтаксис создания регулярных выражений

// const ans = prompt('Введите ваше имя');
// в ans поместится то что введёт пользователь
// допустим надо найти все маленькие буквы n которые мы введём в промт

const reg = /n/; // создаём регулярное выражение помещаем его в переменную и в pattern помещаем то что ищем n

const ans1 = 'ann';
console.log(ans1.search(reg)); 
// метод search() пытается что то найти и в него помещаем регулярное выражение по которму будем искать внутри строки
// получаем 1 это первая позиция в массиве строки
const ans2 = 'gkgkgyk';
console.log(ans2.search(reg));
// получаем -1 это значит буквы n нет в строке большая N тоже не пройдёт

// Флаги
// i - значит что мы хотим что то найти вне зависимости от регистра
// g - значит что мы хотим найти сразу несколько вхождений 
// m - многострочный режим когда есть переносы

const reg1 = /n/i;
const ans3 = 'ANNN';
console.log(ans3.search(reg1)); // метод search() не поддерживает флаг g и всегда ищет только первое совпадение
// получаем 1 потому что флаг i
console.log(ans3.match(reg1));
// метод match() выдаёт массив [ 'N', index: 1, input: 'ANNN', groups: undefined ] с тем что мы искали

const reg2 = /n/ig;
const ans4 = 'ANNN';
console.log(ans4.match(reg2)); // с флагом глобальности получаем массив со всеми N [ 'N', 'N', 'N' ]



// const pass = prompt('Password');
const pass = 'Password';
//replace() заменяет кусок строки на другое выражение 1 аргумент то что заменяем 2 на что мы заменяем
console.log(pass.replace(/./g, "*")); // создаём регулярное выражение прямо в аргументе метода получаем ********
// в регулярных выражениях есть свои правила 
// если ставим . это значит мы берем обсолютно все элименты которые попадут в строку
// если нужно взять только точку внутри строки точку нужно экранировать \.
// так же нужно экранировать и остальные спец символы \ ^ & | и тд.
const pass1 = 'Password...';
console.log(pass1.replace(/\./g, "*")); // получаем Password***

console.log('12-34-56'.replace(/-/g, ':')); // заменяем - на : получаем 12:34:56

//______________________ методы регулярного выражения

// метод test() тестирует есть ли в строке что то похожее на pattern внури регулярки выдаёт true или false

const reg3 = /n/ig;
const ans5 = 'ANNN';
const ans6 = 'Ahytoktpojk';
console.log(reg3.test(ans5)); // получаем true потоу что в строке есть N
console.log(/n/ig.test(ans5)); // получаем true
console.log(/n/ig.test(ans6)); // получаем false
console.log(/ktp/ig.test(ans6)); //получаем true
console.log(/ptk/ig.test(ans6)); // получаем false

// в регулярках есть классы 

// \d ищем только цифры
// \w ищем только бкувы
// \s ищем только пробелы можно искать и так / /ig

const reg4 = /\d/;
const ans7 = 'ytyjtrujtfj3grthdy';
console.log(ans7.match(reg4)); // получаем [ '3', index: 11, input: 'ytyjtrujtfj3grthdy', groups: undefined ]

const reg5 = /\d/g;
const ans8 = '400px';
console.log(ans8.match(reg5)); // с флагом глобальности получаем массив [ '4', '0', '0' ] который можно склеить в строку

// можно вырехать куски строк по шаблону 
const str = 'My name is R2D2';
console.log(str.match(/\w\d\w\d/i)); // получаем массив [ 'R2D2', index: 11, input: 'My name is R2D2', groups: undefined ]
console.log(str.match(/\w\d\w\d/gi)); // получаем массив [ 'R2D2' ]

// в регулярках есть обратные классы синтаксис такой же только большие буквы

// \D ищем не цифры
// \W ищем не бкувы

console.log(str.match(/\W/i)); // получаем массив [ ' ', index: 2, input: 'My name is R2D2', groups: undefined ]
console.log(str.match(/\W/ig)); // получаем массив [ ' ', ' ', ' ' ]
console.log(str.match(/\D/ig)); // получаем массив [ 'M', 'y', ' ', 'n', 'a', 'm', 'e', ' ', 'i', 's', ' ', 'R', 'D' ]

const width = '200px';
console.log(width.replace(/\D/ig, '')); // получаем 200

console.log(width.replace(/\d/ig, '')); 