// Redux Основные принципы 

// работа с динамическими данными и со стейтом оснавная задача разработчика

// в 1 приложении все данные хронились в одном главном компаненте App 
// и потом данные прокидываются ниже к другим компанентам
// для обновления состояний использовали события и изменненые состояния передали по иерархии выше
// данные приходят через пропс и изменяются при помощи методов каторые прописаны в главном компаненте и через пропсы передаются ниже по иерархии
// самое главное сдесь это централизация состояний он все хронятся в главном компаненте
// Props Drilling когда при помощи проперти как бы продреливаваются 

// в 2 приложении в каждом компаненте были свои состояния так как между ними было очень мало зависимостей
// но если в приложении много компанентов начнут друг с другом связываться то такая логика может перерасти в очень запутаную
// получится смесь между двумя подходами

// для сложных приложений со сложными зависимостями между компанентами были придуманы различные паттерны проектирования MVC, MVP, MVVM и тд.

// что бы создать сложное приложение в катором компаненты будут содиржать какую то логику и будут при этом взаимосвязаны
// при этом не создавать Props Drilling и не хранить стейт в каждом компаненте
// для этого все стейты выносят в один большой глобальный стейт как единственный источник данных
// но в таком случае каждый клмпанент может изменить глобальный стейт

// логику по изменению стейтов выносят в отдельную сущность Reducer
// Reducer будет знать как обновлять стейт при обсолютно любом действии
// Reducer должен получить предыдущее значение стейта что бы его поменять

// что бы передавать запросы редьюсеру используются события Actions тоесть действия

// компанент Store объеденяет Reducer и State вместе контралирует работу Reducer и обнавление стейта

// компанент Wiew объеденяет все компаненты каторые рендарят интерфейс

// получается такая схема есть простое отображение компанентов Wiew
// при выпалнении какова либо действия создается Actions каторый знает что надо обновить в стейте
// Actions попадает в Reducer каторый знает как именно обнвить стейт и Reducer уже обнавляет стейт и компаненты перерисовываются занова

// операция по передаче Actions в Reducer называется dispatch это единственный способ измениь значения внутри Store

// есть еще селекторы в редаксе так называются функции каторые получают часть данных из хронилища Store для дальнейшего использования
// селекторы могут и не присутствовать в приложении

// так работает редакс

// редакс эо не отдельная часть реакта это отедльный паттерн каторый может использоваться саостоятельно или с другими библиотеками или 
// фреймворками это оди из вариантов State Management управления состояниями в приложениях

// есть и дрругие State Management например MobX