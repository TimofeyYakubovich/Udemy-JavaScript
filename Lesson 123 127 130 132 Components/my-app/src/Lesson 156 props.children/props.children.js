import React from "react";

const DynamicGreatingLesson156 = (props) => {
    return (
        <div className={"mb-3 p-3 border border-" + props.color}>
            {/* {props.children}  */}
            дословно можно сказать что вместо props.children передаёются все элименты или компаненты 
            каторые мы поместим внутрь DynamicGreatingLesson156 в App.js <br />

            Есть еще одна воозможнасть <br />
            Работа с массивом элиментов каторый передаётся как children <br />
            можно испльзовать методы map, forEach, count, only, toArray <br />
            тоесть можно брать те элименты каторые передаются в этот компанент перебирать их и что то с ними делать через колбек <br />
            очень часто эти методы работают со свойством cloneElement() Клонирует и возвращает новый React-элемент <br />

            допустим в App.js внутрь DynamicGreatingLesson156 приходят какие то элименты и надо к каждому добавить какие то <br />
            определенные классы и сделать это динамичесик внутри DynamicGreatingLesson156 <br />

            {
            // React.Children предоставляет функции для работы с непрозрачной структурой данных this.props.children
            // у каждого из React.Children есть методы например map
            // map принимает 2 аргумента: 1 это какие то props.children, 2 это колбек функция каторая будет выполняться для этого ребенка
            // если в children один элимент то он будет просто передан туда как потомок, но в children может передаваться и массив и
            // он будет пройден и функция будет вызвана для каждого потомка в массиве как обычно работает метод map
                React.Children.map(props.children, child => { // child каждый ребенок в props.children
                    // так как мы будет модифицировать элименты в props.children нужно соблюдать принцепы иммутабельности
                    // тоесть нельзя изменять текущие объекты (реакт элименты)
                    // нам нужно добавить к ним новые классы но при этом записать их в клнированный элимент для этого применяется 
                    // React.cloneElement
                    return React.cloneElement(child, {className: 'shadow p-3 m-3 border rounded'})
                    // cloneElement принимает 3 аргумента: 1 - просто элимент, 2 - [config] должен содержать все новые пропсы, 
                    // key, а также ref Полученный элемент будет иметь пропсы исходного элемента, 
                    // а новые пропсы будут поверхностно слиты воедино. 
                    // 3 - [...children] дети каторые буду передавать во внутрь команента

                    // child это каждый элимент катрый передаётся внутрь DynamicGreatingLesson156 в App.js
                    // 2 аргуемент то что мы добовляем тоесть className

                    // теперь элименты внутри DynamicGreatingLesson156 будут отрендерены на страницу с классами 'shadow p-3 m-3 border rounded'
                    // так же можно добовлять  внутренности этих элиментов через 3 аргумент [...children]
                })
            }

        </div>
    )
}

export default DynamicGreatingLesson156;