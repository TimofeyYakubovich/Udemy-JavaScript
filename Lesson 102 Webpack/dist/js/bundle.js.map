{"version":3,"file":"bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;UCvB3B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;AACA,iBAAiB,mBAAO,CAAC,gCAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G","sources":["webpack://lesson-102/./src/js/main.js","webpack://lesson-102/webpack/bootstrap","webpack://lesson-102/./src/js/script.js"],"sourcesContent":["'use sctrict'\r\n\r\n// допустим js файлы по 20 000 строк и их стоит разделить на более мелкие файлы \r\n// некаторые из них зависят друг от друга \r\n// что бы собрать все файлы в один скрипт существует несколько подходов\r\n// самый популярный это система моделей CommonJS и система импотров экспортов которые появились в стандарте ES6\r\n\r\n\r\n\r\n//  допустим нужно перенести эту функцию из файла main.js в файл index.js что бы использовать её там \r\n\r\nfunction myModule() {\r\n    this.hello = function() {\r\n        console.log('hello');\r\n    };\r\n\r\n    this.goodbye = function() {\r\n        console.log('goodbye');\r\n    };\r\n}\r\n\r\n// синтаксис CommonJS\r\n// обращаемся к объекту module и у него есть свойство exports \r\nmodule.exports = myModule; // экспортируем функцию, на щас нужно где то ее импортировать (переходи в файл index.js)","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// импортируем кусок кода из main.js с помощью функции require в нее передаём путь к файлу откуда импортируем без приписки js\r\nconst myModule = require('./main');\r\n\r\nconst myModuleInstans = new myModule;\r\n\r\nmyModuleInstans.hello();\r\nmyModuleInstans.goodbye();\r\n\r\n// брвузер не умеет ссобираь модули самостоятельно он просто выдаст ошибку потому что не знает чо за функция require\r\n// для сборки модулей будем использовать сборщик Webpack\r\n\r\n//сначало как обычно нужно установить Webpack себе в npm проект\r\n\r\n// mkdir webpack-demo создаем папку командой mkdir\r\n// cd webpack-demo переходим в эту папку\r\n// npm init -y  инициализируем первый npm проект\r\n// npm install webpack webpack-cli --save-dev  устанавливаем непосредственно webpack\r\n// webpack это сам webpack\r\n// webpack-cli это то что позволяет запускать webpack с командной строки\r\n\r\n// если мы используем стандартные настройки webpack то фаил indox.js куда мы всё импортируем должен лежать в папке src\r\n\r\n// запускаем webpack npx webpack \r\n// в папке dist появляется фаил main.js\r\n\r\n// в реальных проектах используется конфигурационный файл для гибкой настройки сборок\r\n\r\n// "],"names":[],"sourceRoot":""}