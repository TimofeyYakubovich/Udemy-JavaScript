'use strict'

// модуль используется что бы скрыть внутренние детали реализации скрипта
// скрипт делят на модули, каждый функционал в отдельный файлик как с SCSS препроцессорами
// допустим мы подключли какую то стороннию библиотеку lib.js
// если внутри уже нашего скрипта мы создади похожую переменную app то в консоле в браузере получим ошибку
// это и есть загрязнение глобального пространства какая то библиотека создала глабальную переменную app
// и мы создали такую же переенную поэтому желательно скрывать переменные в локальной области видимости
// когда мы переносим свой код из проекта в проект инкапсляция позволяет нам менять внутреннию реализацию модулей безболезненно

const app = '123';  // если внутри уже нашего скрипта мы создади похожую переменную app то в консоле в браузере получим ошибку

// 2 оснавных способа создания модулей через нативную реализацию

// 1 способ использовать анонимную самовызывающуюся функцию

const number = 1; // записываем переменную в глобальную область видимости

// анонимная самовызывающаяся функция
// анонимная потому что у нее нет имени
// самовызывающаяся потому что сруз после того как она была объявлена она сразу же и вызывается function(){ } ()
// если не ставить внешние круглые скобки () то мы получаем FUNCTION DECLARATION а она не может быть анонимной
// с внешними круглые скобки () это будет FUNCTION EXPRESSION а она может быть анонимной
// FUNCTION DECLARATION Создается до начала выполнения скрипта,можно вызвать перед объявлением
// FUNCTION EXPRESSION  Создается только тогда, когда доходит поток кода, можно вызвать только после объявления.

(function(){  // при помощи такой функции мы создаём локальную область видимости
    let number = 2;
    console.log(number);     // получаем 2 с локальной переменной
    console.log(number + 3); // получаем 5
}());

console.log(number);         // получаем 1 с глобальной переменной


// 2 способ создания модуля использование объектного интерфейса
// модуль записываем в переменную и в нее возвращаем методы доступные снаружи

const user = (function(){  
    const privat = function() {  // помещаем FUNCTION EXPRESSION в переменную privat доступа к каторой с наружи мы не имеем
        console.log('I am privat');
    };

    return {  // из анонимной функции function() возвращаем объект
        sayHello: privat // помещаем в него метод sayHello и внего передаём ссылку на приватную функцию privat
    };
}());

// наша анонимная самовызывающуюся функция создаёт объект и экспортирует только те методы или свойства которые нам нужны снаружи
// в такие анонимные самовызывающаяся функции можно лижить отдельные части функционала скрипта канкулятор, слайдер и тд.

user.sayHello(); // получаем I am privat так мы можем использовать те методы которые были экспортированны из объектного интерфейса
